import{_ as n}from"./rm-rf2.c98785e5.js";import{_ as s,c as a,o as e,a as t}from"./app.f6226b5c.js";const f='{"title":"Google zx English Version","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":2,"title":"Background","slug":"background"},{"level":3,"title":"Topic","slug":"topic"},{"level":2,"title":"History","slug":"history"},{"level":3,"title":"Using javascript to write shell scripts","slug":"using-javascript-to-write-shell-scripts"},{"level":3,"title":"A native way:child_process","slug":"a-native-way-child-process"},{"level":3,"title":"Shelljs executes the Linux command line","slug":"shelljs-executes-the-linux-command-line"},{"level":3,"title":"Use spawn to write cross-platform Node.js commands","slug":"use-spawn-to-write-cross-platform-node-js-commands"},{"level":3,"title":"Google zx","slug":"google-zx"},{"level":3,"title":"Refrences","slug":"refrences"}],"relativePath":"en.md","lastUpdated":1643101764077}',o={},p=t('<h1 id="google-zx-english-version" tabindex="-1">Google zx English Version <a class="header-anchor" href="#google-zx-english-version" aria-hidden="true">#</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p><a href="https://anprettyboy.github.io/handsome-man/" target="_blank" rel="noopener noreferrer">The most popular project for 2021 is ZX</a>, a new tool from Google for writing simple command-line scripts in JavaScript or TypeScript.</p><p>Basically it lets you embed any bash expression in your code (ls, cat, git... Wait for any order!) And use the result of JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noopener noreferrer">Template literals</a> with the <a href="./.html">await operator</a>.</p><p>It introduces utilities provided by several popular packages:</p><ul><li><a href="https://github.com/node-fetch/node-fetch" target="_blank" rel="noopener noreferrer">Node-fetch</a> has the same API as <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noopener noreferrer">Fetch</a> in the browser to create HTTP requests.</li><li><a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="noopener noreferrer">Fs-extra</a> handles file system operations.</li><li><a href="https://github.com/sindresorhus/globby" target="_blank" rel="noopener noreferrer">globby</a> matches a given filename in user-friendly mode.</li></ul><h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-hidden="true">#</a></h2><p><a href="https://github.com/google/zx" target="_blank" rel="noopener noreferrer">&quot;Bash is great, but when it comes to scripting, people often choose a more convenient programming language. JavaScript is a perfect choice, but the standard Node.js library requires extra hassle before it can be used. The ZX package provides a useful wrapper around child_process, escaping parameters and providing reasonable defaults.&quot;</a></p><h3 id="topic" tabindex="-1">Topic <a class="header-anchor" href="#topic" aria-hidden="true">#</a></h3><img src="'+n+`" style="width:auto;height:auto;"><p>&quot;Imagine that you wanted to delete: rm -rf $dir/ and then when dir is empty, what becomes? If $dir is empty, it is equivalent to executing rm -rf /, which deletes all files and folders... Then, your system did not, this is the legendary delete library run ~~~~&quot;</p><h2 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-hidden="true">#</a></h2><h3 id="using-javascript-to-write-shell-scripts" tabindex="-1">Using javascript to write shell scripts <a class="header-anchor" href="#using-javascript-to-write-shell-scripts" aria-hidden="true">#</a></h3><p>#! is a convention tag that tells the system what interpreter the script needs to run, that is, which shell to use. #! Known as shebang (<a href="https://zh.wikipedia.org/wiki/Shebang" target="_blank" rel="noopener noreferrer">also known as Hashbang</a>), such as bash\uFF1A#! /bin/bash.</p><p>The simplest script</p><div class="language-shell"><pre><code><span class="token shebang important">#!/usr/bin/env node</span>
console.log<span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
To save the sample code above as test.js, execute the script with node, and get the output from the console.

Further, we give the script an execution permission:
\`\`\`shell
<span class="token function">chmod</span> <span class="token number">755</span> <span class="token builtin class-name">test</span>
</code></pre></div><h4 id="reads-all-files-in-a-given-folder" tabindex="-1">Reads all files in a given folder <a class="header-anchor" href="#reads-all-files-in-a-given-folder" aria-hidden="true">#</a></h4><p>Read the current folder using the fs.readdirSync method, which returns an array of all subfolders or files under a given folder,</p><p>For example, I have a test folder in the current directory</p><div class="language-shell"><pre><code><span class="token builtin class-name">test</span>
\u251C\u2500\u2500 <span class="token number">1</span>.html
\u251C\u2500\u2500 <span class="token number">1</span>.txt
\u2514\u2500\u2500 files
</code></pre></div><p>fs. ReaddirSync (&#39;/test &#39;) output for [&#39; 1.html &#39;, &#39;1.txt&#39; and &#39;files&#39;]</p><p>Create a new file, getFile, to store the script code</p><h4 id="unchanging-folder" tabindex="-1">Unchanging folder <a class="header-anchor" href="#unchanging-folder" aria-hidden="true">#</a></h4><p>Read all files in a given directory and print the following code:</p><div class="language-shell"><pre><code><span class="token shebang important">#!/usr/bin/env node</span>

const testFolder <span class="token operator">=</span> <span class="token string">&#39;./test/&#39;</span><span class="token punctuation">;</span>
const fs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs.readdirSync<span class="token punctuation">(</span>testFolder<span class="token punctuation">)</span>.forEach<span class="token punctuation">(</span>file <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  console.log<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="get-user-input" tabindex="-1">Get user input <a class="header-anchor" href="#get-user-input" aria-hidden="true">#</a></h4><p>The given path of the above code is writable, we need to input it as a parameter, nodejs reads the user&#39;s input method:</p><div class="language-shell"><pre><code>const <span class="token punctuation">[</span>nodeEnv,dir,<span class="token punctuation">..</span>.args<span class="token punctuation">]</span><span class="token operator">=</span>process.argv //args is a parameter entered by the user
</code></pre></div><p>Modify the script code:</p><div class="language-shell"><pre><code><span class="token shebang important">#!/usr/bin/env node</span>

const fs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
const <span class="token punctuation">[</span>nodeEnv,dir,<span class="token punctuation">..</span>.args<span class="token punctuation">]</span><span class="token operator">=</span>process.argv

// Gets the path entered by the user:
const <span class="token assign-left variable">folder</span><span class="token operator">=</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

fs.readdirSync<span class="token punctuation">(</span>folder<span class="token punctuation">)</span>.forEach<span class="token punctuation">(</span>file <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  console.log<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The path can now be entered by itself when the script is executed:</p><div class="language-shell"><pre><code><span class="token function">node</span> getFile your path
</code></pre></div><h3 id="a-native-way-child-process" tabindex="-1">A native way:child_process <a class="header-anchor" href="#a-native-way-child-process" aria-hidden="true">#</a></h3><p>Nodejs can use the child_process module to create a child process that executes the unit system command, as shown in the following example:</p><div class="language-shell"><pre><code><span class="token shebang important">#!/usr/bin/env node</span>


//-----Synchronous writing\u{1F447}
const <span class="token assign-left variable">execSync</span><span class="token operator">=</span>require<span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span>.execSync

const <span class="token assign-left variable">res</span><span class="token operator">=</span>execSync<span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span>
console.log<span class="token punctuation">(</span><span class="token string">&quot;res&quot;</span>, res.toString<span class="token punctuation">(</span><span class="token punctuation">))</span>


// ----- Code asynchronously\u{1F447}
const <span class="token assign-left variable">exec</span><span class="token operator">=</span>require<span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span>.exec
exec<span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span>,<span class="token punctuation">(</span>err,stdout,stderr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
   if<span class="token punctuation">(</span>err<span class="token punctuation">)</span>throw err
   console.log<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="shelljs-executes-the-linux-command-line" tabindex="-1">Shelljs executes the Linux command line <a class="header-anchor" href="#shelljs-executes-the-linux-command-line" aria-hidden="true">#</a></h3><p>First you need to install shellJS:</p><div class="language-"><pre><code>npm i shelljs -S
</code></pre></div><p>Shelljs provides many methods, the most common of which is the exec function, for example:</p><div class="language-shell"><pre><code>const <span class="token assign-left variable">shell</span><span class="token operator">=</span>require<span class="token punctuation">(</span><span class="token string">&#39;shelljs&#39;</span><span class="token punctuation">)</span>
/**
 * Function signature:exec<span class="token punctuation">(</span>command <span class="token punctuation">[</span>, options<span class="token punctuation">]</span> <span class="token punctuation">[</span>, callback<span class="token punctuation">]</span><span class="token punctuation">)</span>
 * command:The <span class="token builtin class-name">command</span> to be executed
 * callback:A callback <span class="token keyword">function</span> that processes the output of <span class="token builtin class-name">command</span>
 * options:
 *  async: If provided by callback, this parameter is ignored and asynchronous execution is enforced <span class="token punctuation">(</span>default: <span class="token boolean">false</span><span class="token punctuation">)</span>.
 *  fatal: Exit upon error <span class="token punctuation">(</span>default: <span class="token boolean">false</span><span class="token punctuation">)</span>.
 *  silent: Whether to output <span class="token keyword">in</span> console<span class="token punctuation">(</span>default: <span class="token boolean">false</span><span class="token punctuation">)</span>.
 *  encoding: Set the encoding of stdout and stderr<span class="token punctuation">(</span>default: <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
 */

//Output the result of ls:
shell.exec<span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">)</span>

//callback<span class="token punctuation">(</span>code,stdout,stderr<span class="token punctuation">)</span>  A code of <span class="token number">0</span> means success<span class="token punctuation">;</span> otherwise, failure
shell.exec<span class="token punctuation">(</span><span class="token string">&quot;dir&quot;</span>,<span class="token punctuation">{</span>silent:true<span class="token punctuation">}</span>,<span class="token punctuation">(</span>code,stdout,stderr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

shell.exec<span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span>,<span class="token punctuation">{</span>silent:true<span class="token punctuation">}</span>,<span class="token punctuation">(</span>code,stdout,stderr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
    console.log<span class="token punctuation">(</span>code<span class="token punctuation">)</span>
    console.log<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>During development, the following commands are often encountered:</p><div class="language-shell"><pre><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit -m <span class="token string">&#39;your commit messages&#39;</span>
<span class="token function">git</span> push
</code></pre></div><ol><li>Create a new file shell. Js under the root directory with the following contents:</li></ol><div class="language-shell"><pre><code><span class="token builtin class-name">let</span> shell <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;shelljs&#39;</span><span class="token punctuation">)</span>
<span class="token builtin class-name">let</span> name <span class="token operator">=</span> process.argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;Auto-commit&#39;</span><span class="token punctuation">;</span>
<span class="token builtin class-name">let</span> <span class="token builtin class-name">exec</span> <span class="token operator">=</span> shell.exec

<span class="token keyword">if</span> <span class="token punctuation">(</span>exec<span class="token punctuation">(</span><span class="token string">&#39;git add .&#39;</span><span class="token punctuation">)</span>.code <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    echo<span class="token punctuation">(</span><span class="token string">&#39;Error: Git add failed&#39;</span><span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>exec<span class="token punctuation">(</span><span class="token variable"><span class="token variable">\`</span><span class="token function">git</span> commit -am <span class="token string">&quot;<span class="token variable">\${name}</span>&quot;</span><span class="token variable">\`</span></span><span class="token punctuation">)</span>.code <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    echo<span class="token punctuation">(</span><span class="token string">&#39;Error: Git commit failed&#39;</span><span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>exec<span class="token punctuation">(</span><span class="token string">&#39;git push&#39;</span><span class="token punctuation">)</span>.code <span class="token operator">!=</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    echo<span class="token punctuation">(</span><span class="token string">&#39;Error: Git commit failed&#39;</span><span class="token punctuation">)</span>
    exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="2"><li>Perform all of the above tasks with a single command, added to package.json as follows:</li></ol><div class="language-shell"><pre><code><span class="token string">&quot;script&quot;</span>:<span class="token punctuation">{</span>
    <span class="token string">&quot;push&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;node ./shell.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="3"><li>Execution</li></ol><div class="language-shell"><pre><code><span class="token function">npm</span> run push <span class="token string">&#39;Test the ShellJS commit code&#39;</span>
</code></pre></div><h3 id="use-spawn-to-write-cross-platform-node-js-commands" tabindex="-1">Use spawn to write cross-platform Node.js commands <a class="header-anchor" href="#use-spawn-to-write-cross-platform-node-js-commands" aria-hidden="true">#</a></h3><p>If you want to write a cross-platform spawn command without incurring extra overhead, you can write it like this:</p><div class="language-shell"><pre><code>const process <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
const <span class="token punctuation">{</span> spawn <span class="token punctuation">}</span> <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

spawn<span class="token punctuation">(</span><span class="token string">&#39;npm&#39;</span>, <span class="token punctuation">{</span>
 stdio: <span class="token string">&#39;inherit&#39;</span>,
 // Use the shell only when the current operating environment is Windows
 shell: process.platform <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&#39;win32&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div><h4 id="cross-spawn-third-party-modules" tabindex="-1">cross-spawn Third-party modules <a class="header-anchor" href="#cross-spawn-third-party-modules" aria-hidden="true">#</a></h4><p>\u5173\u4E8E spawn \u51FD\u6570\u7684\u8DE8\u5E73\u53F0\u5199\u6CD5\uFF0C\u9664\u4E86\u81EA\u5DF1\u7F16\u5199\u4EE3\u7801\u7684\u65F6\u5019\u505A\u5904\u7406\uFF0C\u4E5F\u6709\u7B2C\u4E09\u65B9\u6A21\u5757\u5C01\u88C5\u597D\u4E86\u76F8\u5173\u7EC6\u8282\uFF0C\u5982 cross-spawn\u3002</p><p>\u4F7F\u7528\u8BE5\u6A21\u5757\uFF0C\u53EF\u4EE5\u5728\u8C03\u7528 spawn \u51FD\u6570\u65F6\uFF0C\u81EA\u52A8\u6839\u636E\u5F53\u524D\u7684\u8FD0\u884C\u5E73\u53F0\uFF0C\u6765\u51B3\u5B9A\u662F\u5426\u751F\u6210\u4E00\u4E2A shell \u6765\u6267\u884C\u6240\u7ED9\u7684\u547D\u4EE4\u3002\u5BF9\u547D\u4EE4\u548C\u53C2\u6570\u4E2D\u7684\u5B57\u7B26\u8FDB\u884C\u8F6C\u4E49\u66F4\u4E3A\u65B9\u4FBF\u3002</p><h3 id="google-zx" tabindex="-1">Google zx <a class="header-anchor" href="#google-zx" aria-hidden="true">#</a></h3><p>\u201CBash is great, so I choose JavaScript\u201D</p><p>What front-end development is good at is Javascript.</p><h4 id="installation-and-usage" tabindex="-1">Installation and usage <a class="header-anchor" href="#installation-and-usage" aria-hidden="true">#</a></h4><div class="language-shell"><pre><code><span class="token function">npm</span> i -g zx
</code></pre></div><p>Once zx is installed, write scripts in files with the.mjs suffix, or use the.js suffix, but use void async function () {... }() wraps the script.</p><p>Note the following points when using:</p><h4 id="_1\u3001the-script-needs-to-contain-the-following-headers" tabindex="-1">1\u3001The script needs to contain the following headers: <a class="header-anchor" href="#_1\u3001the-script-needs-to-contain-the-following-headers" aria-hidden="true">#</a></h4><div class="language-"><pre><code>#!/usr/bin/env zx
</code></pre></div><h4 id="_2-add-execution-permission-before-running-it" tabindex="-1">2. Add execution permission before running it: <a class="header-anchor" href="#_2-add-execution-permission-before-running-it" aria-hidden="true">#</a></h4><div class="language-"><pre><code>$ chmod +x ./script.mjs
$ ./script.mjs

# Or use this command:
$ zx ./script.mjs
</code></pre></div><h4 id="zx-frequently-used-commands" tabindex="-1">zx Frequently used commands <a class="header-anchor" href="#zx-frequently-used-commands" aria-hidden="true">#</a></h4><h5 id="command" tabindex="-1">$<code>command</code> <a class="header-anchor" href="#command" aria-hidden="true">#</a></h5><p>Using the exec function provided in the child_process package, you can execute the string as a command and return a Promise(ProcessOutput) object. Everything that passes \${... } are automatically escaped and referenced</p><div class="language-shell"><pre><code><span class="token builtin class-name">let</span> count <span class="token operator">=</span> parseInt<span class="token punctuation">(</span>await $<span class="token variable"><span class="token variable">\`</span><span class="token function">ls</span> -1 <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">\`</span></span><span class="token punctuation">)</span>
console.log<span class="token punctuation">(</span><span class="token variable"><span class="token variable">\`</span>Files count: $<span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token variable">\`</span></span><span class="token punctuation">)</span>
</code></pre></div><p>To upload files in parallel,you can use the following scripts:</p><div class="language-shell"><pre><code><span class="token builtin class-name">let</span> hosts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
await Promise.all<span class="token punctuation">(</span>hosts.map<span class="token punctuation">(</span>host <span class="token operator">=</span><span class="token operator">&gt;</span>
  $<span class="token variable"><span class="token variable">\`</span><span class="token function">rsync</span> -azP ./src $<span class="token punctuation">{</span>host<span class="token punctuation">}</span>:/var/www<span class="token variable">\`</span></span>
<span class="token punctuation">))</span>
</code></pre></div><p>To change the working path, use the CD () method:</p><div class="language-shell"><pre><code>cd<span class="token punctuation">(</span><span class="token string">&#39;/tmp&#39;</span><span class="token punctuation">)</span>
// output: /tmp
await $<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">pwd</span><span class="token variable">\`</span></span>
</code></pre></div><p>The fetch method wraps the <a href="https://github.com/node-fetch/node-fetch" target="_blank" rel="noopener noreferrer">node-fetch</a> package:</p><div class="language-shell"><pre><code><span class="token builtin class-name">let</span> resp <span class="token operator">=</span> await fetch<span class="token punctuation">(</span><span class="token string">&#39;http://wttr.in&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>resp.ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console.log<span class="token punctuation">(</span>await resp.text<span class="token punctuation">(</span><span class="token punctuation">))</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The question() method wraps the <a href="http://nodejs.cn/api/readline.html" target="_blank" rel="noopener noreferrer">readline</a> package:</p><div class="language-shell"><pre><code><span class="token builtin class-name">type</span> QuestionOptions <span class="token operator">=</span> <span class="token punctuation">{</span> choices: string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> question<span class="token punctuation">(</span>query: string, options?: QuestionOptions<span class="token punctuation">)</span>: Promise<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>
</code></pre></div><p>Usage:</p><div class="language-shell"><pre><code><span class="token builtin class-name">let</span> username <span class="token operator">=</span> await question<span class="token punctuation">(</span><span class="token string">&#39;What is your username? &#39;</span><span class="token punctuation">)</span>
<span class="token builtin class-name">let</span> token <span class="token operator">=</span> await question<span class="token punctuation">(</span><span class="token string">&#39;Choose env variable: &#39;</span>, <span class="token punctuation">{</span>
  choices: Object.keys<span class="token punctuation">(</span>process.<wbr>env<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>For the <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener noreferrer">chalk</a> package, without importing it, you can use:</p><div class="language-shell"><pre><code>console.log<span class="token punctuation">(</span>chalk.blue<span class="token punctuation">(</span><span class="token string">&#39;Hello world!&#39;</span><span class="token punctuation">))</span>
</code></pre></div><p><a href="http://nodejs.cn/api/fs.html" target="_blank" rel="noopener noreferrer">fs</a> package, import can be directly used:</p><div class="language-shell"><pre><code><span class="token builtin class-name">let</span> content <span class="token operator">=</span> await fs.readFile<span class="token punctuation">(</span><span class="token string">&#39;./package.json&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p><a href="https://github.com/sindresorhus/globby" target="_blank" rel="noopener noreferrer">globby</a> package The globby package.</p><div class="language-shell"><pre><code><span class="token builtin class-name">let</span> packages <span class="token operator">=</span> await globby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;package.json&#39;</span>, <span class="token string">&#39;packages/*/package.json&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token builtin class-name">let</span> pictures <span class="token operator">=</span> globby.globbySync<span class="token punctuation">(</span><span class="token string">&#39;content/*.(jpg|png)&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>os package The os package.</p><div class="language-shell"><pre><code>await $<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">cd</span> $<span class="token punctuation">{</span>os.homedir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> example<span class="token variable">\`</span></span>
</code></pre></div><p>path package The <a href="https://nodejs.org/api/path.html" target="_blank" rel="noopener noreferrer">path</a> package.</p><div class="language-shell"><pre><code>await $<span class="token variable"><span class="token variable">\`</span><span class="token function">mkdir</span> $<span class="token punctuation">{</span>path.join<span class="token punctuation">(</span>basedir, <span class="token string">&#39;output&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token variable">\`</span></span>
</code></pre></div><p>minimist package</p><p>The <a href="https://www.npmjs.com/package/minimist" target="_blank" rel="noopener noreferrer">minimist</a> package.</p><p>Available as global const argv. zx can also be imported from other scripts:</p><div class="language-shell"><pre><code><span class="token shebang important">#!/usr/bin/env node</span>
<span class="token function">import</span> <span class="token punctuation">{</span>$<span class="token punctuation">}</span> from <span class="token string">&#39;zx&#39;</span>
await $<span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span>
</code></pre></div><p>Passing environment variables:</p><div class="language-shell"><pre><code>process.<wbr>env.FOO <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>
await $<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> $FOO<span class="token variable">\`</span></span>
</code></pre></div><p>Executing remote scripts:</p><div class="language-shell"><pre><code>zx https://your-remote-server.com/example-script.mjs
</code></pre></div><h3 id="refrences" tabindex="-1">Refrences <a class="header-anchor" href="#refrences" aria-hidden="true">#</a></h3><ul><li><a href="https://www.sitepoint.com/google-zx-write-node-shell-scripts/" target="_blank" rel="noopener noreferrer">How to Write Shell Scripts in Node with Google\u2019s zx Library</a></li><li><a href="https://juejin.cn/post/6987307041321091079" target="_blank" rel="noopener noreferrer">shelljs\u524D\u7AEF\u81EA\u52A8\u5316</a></li><li><a href="https://juejin.cn/post/6992743763844005902" target="_blank" rel="noopener noreferrer">\u4F7F\u7528javascript\u5199shell\u811A\u672C</a></li><li><a href="https://juejin.cn/post/6979989936137043999" target="_blank" rel="noopener noreferrer">nodejs\u5199bash\u811A\u672C\u7EC8\u6781\u65B9\u6848\uFF01</a></li><li><a href="https://juejin.cn/post/7048286354861457416" target="_blank" rel="noopener noreferrer">ZX \u7528JavaScript\u5199bash\u811A\u672C</a></li><li><a href="https://juejin.cn/post/6979989936137043999#heading-4" target="_blank" rel="noopener noreferrer">nodejs\u5199bash\u811A\u672C\u7EC8\u6781\u65B9\u6848\uFF01</a></li><li><a href="https://juejin.cn/post/7011464539141046279" target="_blank" rel="noopener noreferrer">zx, \u5982\u4F55\u7528Javascript\u4F18\u96C5\u7684\u4E66\u5199\u811A\u672C\u547D\u4EE4</a></li><li><a href="https://juejin.cn/post/7002536429314277384" target="_blank" rel="noopener noreferrer">Google zx \u6E90\u7801\u6D45\u6790</a></li><li><a href="https://atomcloud.cn/google-script-tool-zx/" target="_blank" rel="noopener noreferrer">Google \u811A\u672C\u5DE5\u5177 zx \u4F7F\u7528\u6559\u7A0B</a></li><li><a href="https://www.sitepoint.com/google-zx-write-node-shell-scripts/" target="_blank" rel="noopener noreferrer">How to Write Shell Scripts in Node with Google\u2019s zx Library</a></li><li><a href="https://www.infoq.com/news/2021/05/zx-javascript-cli-scripts/" target="_blank" rel="noopener noreferrer">Zx - a Tool for Writing Better Scripts</a></li><li><a href="https://blog.tericcabrel.com/write-a-better-bash-script-with-zx/" target="_blank" rel="noopener noreferrer">Write better bash scripts with Zx</a></li><li><a href="https://blog.mastykarz.nl/create-scripts-javascript-zx/" target="_blank" rel="noopener noreferrer">Create scripts in JavaScript with zx</a></li><li><a href="https://www.mo4tech.com/google-zx-source-code-analysis.html" target="_blank" rel="noopener noreferrer">Google ZX source code analysis</a></li></ul>`,99),c=[p];function l(r,i,u,d,h,k){return e(),a("div",null,c)}var b=s(o,[["render",l]]);export{f as __pageData,b as default};
